/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.netbeans.modules.remotefs.ui;

import java.io.Serializable;
import java.util.List;
import java.util.logging.Logger;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.KeyStroke;
import javax.swing.text.DefaultEditorKit;
import org.netbeans.modules.remotefs.api.RemoteFileSystemInfo;
import org.netbeans.modules.remotefs.api.RemoteFileSystemManager;
import org.netbeans.modules.remotefs.ui.resources.Bundle;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.openide.util.Utilities;
import org.openide.util.actions.SystemAction;

/**
 * Top component which displays something.
 */
final class RemoteFSExplorerTopComponent extends TopComponent implements ExplorerManager.Provider {

    private static RemoteFSExplorerTopComponent instance;
    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "org/netbeans/modules/remotefs/ui/resources/entire-network-16x16.png";
    private static final String PREFERRED_ID = "RemoteFSExplorerTopComponent";
    private static final long serialVersionUID = 1L;
    private transient final ExplorerManager explorerManager = new ExplorerManager();

    private RemoteFSExplorerTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(Bundle.class, "CTL_RemoteFSExplorerTopComponent"));
        setToolTipText(NbBundle.getMessage(Bundle.class, "HINT_RemoteFSExplorerTopComponent"));
        setIcon(Utilities.loadImage(ICON_PATH, true));
        List<RemoteFileSystemInfo> fsInfos = RemoteFileSystemManager.getDefault().getRemoteFileSystems();
        explorerManager.setRootContext(new RootNode(fsInfos));
        ((BeanTreeView) view).setRootVisible(true);
        ((BeanTreeView) view).setDragSource(true);

        ActionMap map = getActionMap();
        map.put(DefaultEditorKit.copyAction, ExplorerUtils.actionCopy(explorerManager));
        map.put(DefaultEditorKit.cutAction, ExplorerUtils.actionCut(explorerManager));
        map.put(DefaultEditorKit.pasteAction, ExplorerUtils.actionPaste(explorerManager));
        map.put("delete", ExplorerUtils.actionDelete(explorerManager, true)); // or false
        map.put("filesystem", getAction(org.openide.actions.FileSystemAction.class));
        InputMap keys = getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        keys.put(KeyStroke.getKeyStroke("control C"), DefaultEditorKit.copyAction);
        keys.put(KeyStroke.getKeyStroke("control X"), DefaultEditorKit.cutAction);
        keys.put(KeyStroke.getKeyStroke("control V"), DefaultEditorKit.pasteAction);
        keys.put(KeyStroke.getKeyStroke("DELETE"), "delete");

        associateLookup(ExplorerUtils.createLookup(explorerManager, map));
    }

    private SystemAction getAction(Class<? extends SystemAction> clazz) {
        return org.openide.util.SharedClassObject.findObject(clazz, true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        view = new BeanTreeView();

        setLayout(new java.awt.BorderLayout());
        add(view, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane view;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized RemoteFSExplorerTopComponent getDefault() {
        if (instance == null) {
            instance = new RemoteFSExplorerTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the RemoteFSExplorerTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized RemoteFSExplorerTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(RemoteFSExplorerTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof RemoteFSExplorerTopComponent) {
            return (RemoteFSExplorerTopComponent) win;
        }
        Logger.getLogger(RemoteFSExplorerTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    /** replaces this in object stream */
    @Override
    public Object writeReplace() {
        return new ResolvableHelper();
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    public ExplorerManager getExplorerManager() {
        return explorerManager;
    }

    final static class ResolvableHelper implements Serializable {

        private static final long serialVersionUID = 1L;

        public Object readResolve() {
            return RemoteFSExplorerTopComponent.getDefault();
        }
    }
}
